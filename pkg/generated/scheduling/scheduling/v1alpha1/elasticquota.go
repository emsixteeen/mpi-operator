/*
Auto-generated file from pre-existing code.

See Copyright or other License notices in their original packages.
*/

// Code generated by xns-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	internalinterfaces "github.com/kubeflow/mpi-operator/pkg/generated/scheduling/internalinterfaces"
	informers "github.com/maistra/xns-informer/pkg/informers"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	schedulingv1alpha1 "sigs.k8s.io/scheduler-plugins/apis/scheduling/v1alpha1"
	versioned "sigs.k8s.io/scheduler-plugins/pkg/generated/clientset/versioned"
	v1alpha1 "sigs.k8s.io/scheduler-plugins/pkg/generated/listers/scheduling/v1alpha1"
)

// ElasticQuotaInformer provides access to a shared informer and lister for
// ElasticQuotas.
type ElasticQuotaInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ElasticQuotaLister
}

type elasticQuotaInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespaces       informers.NamespaceSet
}

// NewElasticQuotaInformer constructs a new informer for ElasticQuota type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewElasticQuotaInformer(client versioned.Interface, namespaces informers.NamespaceSet,
	resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredElasticQuotaInformer(client, namespaces, resyncPeriod, indexers, nil)
}

// NewFilteredElasticQuotaInformer constructs a new informer for ElasticQuota type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredElasticQuotaInformer(client versioned.Interface, namespaces informers.NamespaceSet,
	resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	newInformer := func(namespace string) cache.SharedIndexInformer {
		return cache.NewSharedIndexInformer(
			&cache.ListWatch{
				ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
					if tweakListOptions != nil {
						tweakListOptions(&options)
					}
					return client.SchedulingV1alpha1().ElasticQuotas(namespace).List(context.TODO(), options)
				},
				WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
					if tweakListOptions != nil {
						tweakListOptions(&options)
					}
					return client.SchedulingV1alpha1().ElasticQuotas(namespace).Watch(context.TODO(), options)
				},
			},
			&schedulingv1alpha1.ElasticQuota{},
			resyncPeriod,
			indexers,
		)
	}

	return informers.NewMultiNamespaceInformer(namespaces, resyncPeriod, newInformer)
}

func (f *elasticQuotaInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredElasticQuotaInformer(client, f.namespaces, resyncPeriod,
		cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *elasticQuotaInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&schedulingv1alpha1.ElasticQuota{}, f.defaultInformer)
}

func (f *elasticQuotaInformer) Lister() v1alpha1.ElasticQuotaLister {
	return v1alpha1.NewElasticQuotaLister(f.Informer().GetIndexer())
}
